-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module ProposalTrigger where

import DA.Next.Map (Map)
import qualified DA.Next.Set as Set
import DA.Foldable hiding (elem)

import Daml.Trigger

import Model.Company
import Model.Proposal
import Model.Notification

-- TRIGGER_BEGIN
handleProposals : Trigger ()
handleProposals = Trigger
  { initialize = const ()
  , updateState = \_acs _message () -> ()
  , rule = handleProposalsRule
  , registeredTemplates = AllInDar -- RegisteredTemplates [registeredTemplate @Proposal]
  , heartbeat = None
  }
-- TRIGGER_END

type ContractPair a = (ContractId a, a)

-- RULE_SIGNATURE_BEGIN
handleProposalsRule : Party -> ACS -> Time -> Map CommandId [Command] -> () -> TriggerA ()
handleProposalsRule party acs _time commandsInFlight () = mapA_ go ownedCompanies
  where
    internalCompanies = getContracts @CompanyInternal acs
    ownedCompanies    = filter (\(_, c) -> c.company.owner == party) internalCompanies

    go : ContractPair CompanyInternal -> TriggerA ()
    go = handleSingleCompany party acs _time commandsInFlight ()

-- |Performs all company actions for one owned InternalCompany
handleSingleCompany : Party -> ACS -> Time -> Map CommandId [Command] -> () -> ContractPair CompanyInternal -> TriggerA ()
handleSingleCompany party acs _time commandsInFlight () ownedCompany = do
  let employees = Set.toList $ ownedCompany._2.employees

  -- Delegate proposals, resolve proposal actions and clean up old delegated proposals
  handleDelegation party acs ownedCompany employees

  -- Send notifications to employees
  handleNotifications party acs employees

  -- Expose relevant contracts
  handleInternalContracts party acs employees

-- |Handles all proposal delegation
handleDelegation : Party -> ACS -> ContractPair CompanyInternal -> [Party] -> TriggerA ()
handleDelegation party acs ownedCompany employees = do

  -- Retrieve needed proposals
  let proposals = getContracts @Proposal acs
  let delegatedProposals = getContracts @DelegatedProposal acs
  let ownedProposals = filter (\(_, p) -> p.proposedTo == party) proposals

  -- Only select employees with Reviewer contract
  let reviewers = map ((\(EmployeeReviewer e _) -> e) . snd) $ getContracts @EmployeeReviewer acs

  -- Create delegated proposals
  let newDelegatedProposals = [DelegatedProposal p party e | e     <- employees, e `elem` reviewers
                                                           , (_,p) <- ownedProposals]
  let createDelegatedProposals = filter (\dp -> dp `notElem` (map snd delegatedProposals)) newDelegatedProposals

  mapA_ dedupCreate createDelegatedProposals

  -- Resolve proposal actions
  let delegatedProposalActions = getContracts @DelegatedProposalAction acs
  forA_ delegatedProposalActions $ \(cid,_) -> emitCommands [exerciseCmd cid DelegatedProposalAction_Resolve] [toAnyContractId cid]

  -- Clean up old delegated proposals
  let archiveMissingProposals = dedup $ map fst
                              $ filter (\(_, dp) -> dp.proposal `notElem` map snd ownedProposals) delegatedProposals
  forA_ archiveMissingProposals $ \cid -> emitCommands [exerciseCmd cid Archive] [toAnyContractId cid]

-- |Passes on notifications to all employees
handleNotifications : Party -> ACS -> [Party] -> TriggerA ()
handleNotifications party acs employees = do
  -- Pass on notifications
  let notifications = getContracts @Notification acs
  let ownedNotifications = filter (\(_, n) -> n.receiver == party) notifications
  let toPassedMessage n = n.message <> " (" <> show n.sender <> ")"
  let newNotifications = [Notification party e (toPassedMessage n) | e     <- employees
                                                                   , (_,n) <- ownedNotifications]
  let createNotifications = filter (\n -> n `notElem` (map snd notifications)) newNotifications

  mapA_ dedupCreate createNotifications

  -- Remove owned notifications after passing along to employees
  forA_ ownedNotifications $ \(cid,_) -> emitCommands [exerciseCmd cid Notification_Dismiss] [toAnyContractId cid]

handleInternalContracts : Party -> ACS -> [Party] -> TriggerA ()
handleInternalContracts party acs employees = do
  let agreements = getContracts @Agreement acs
  let internalAgreements = [AgreementInternal party employees a | (_,a) <- agreements]
  mapA_ dedupCreate internalAgreements

-- TODO: see if there is a better way to exercise contracts without duplications
-- we resort to the n^2 version for now. Once we have Maps we can use those to implement a more efficient dedup.
dedup : Eq k => [k] -> [k]
dedup [] = []
dedup (x :: xs) = x :: dedup (filter (/= x) xs)
