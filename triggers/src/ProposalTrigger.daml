-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module ProposalTrigger where

import DA.List hiding (dedup)
import DA.Next.Map (Map)
import DA.Foldable

import Daml.Trigger

import Templates

-- TRIGGER_BEGIN
handleProposals : Trigger ()
handleProposals = Trigger
  { initialize = const ()
  , updateState = \_acs _message () -> ()
  , rule = handleProposalsRule
  , registeredTemplates = AllInDar -- RegisteredTemplates [registeredTemplate @Proposal]
  , heartbeat = None
  }
-- TRIGGER_END

-- RULE_SIGNATURE_BEGIN
handleProposalsRule : Party -> ACS -> Time -> Map CommandId [Command] -> () -> TriggerA ()
handleProposalsRule party acs _time commandsInFlight () = do

  -- Fetch all necessary contracts
  let proposals : [(ContractId Proposal, Proposal)] = getContracts @Proposal acs
  let internalCompanies : [(ContractId CompanyInternal, CompanyInternal)] = getContracts @CompanyInternal acs
  let delegatedProposals : [(ContractId DelegatedProposal, DelegatedProposal)] = getContracts @DelegatedProposal acs

  -- Resolve proposal actions
  let delegatedProposalActions : [(ContractId DelegatedProposalAction, DelegatedProposalAction)] = getContracts @DelegatedProposalAction acs
  forA_ delegatedProposalActions $ \(cid,_) -> emitCommands [exerciseCmd cid DelegatedProposalAction_Resolve] [toAnyContractId cid]

  -- Create new delegated proposals
  let ownedCompany = head $ filter (\(_, c) -> c.company.owner == party) internalCompanies
  let ownedProposals = filter (\(_, p) -> p.proposedTo == party) proposals

  let employees = ownedCompany._2.employees
  let newDelegatedProposals = [DelegatedProposal p (snd ownedCompany) e | e <- employees, (_,p) <- ownedProposals]
  let createDelegatedProposals = filter (\dp -> dp `notElem` (map snd delegatedProposals)) newDelegatedProposals

  mapA_ dedupCreate createDelegatedProposals

  -- Clean up old delegated proposals
  let archiveMissingProposals = dedup $ map fst
                              $ filter (\(_, dp) -> dp.proposal `notElem` map snd ownedProposals) delegatedProposals
  forA_ archiveMissingProposals $ \cid -> emitCommands [exerciseCmd cid Archive] [toAnyContractId cid]

-- we resort to the n^2 version for now. Once we have Maps we can use those to implement a more efficient dedup.
dedup : Eq k => [k] -> [k]
dedup [] = []
dedup (x :: xs) = x :: dedup (filter (/= x) xs)
