module Templates where


template Company
  with
    owner : Party
    name : Text
    observers : [Party]
  where
    signatory owner
    observer observers
    key (owner, name) : (Party, Text)
    maintainer key._1
    controller owner can
      Company_UpdateName : ContractId Company
        with
          newName : Text
        do
          create this with name = newName

    nonconsuming choice Company_Propose : ContractId Proposal
      with
        proposer : Party
        proposal : Text
      controller proposer
      do
        create Proposal with proposer, proposedTo = owner, proposal


template CompanyInternal
  with
    company : Company
    employees : [Party]
    management : [Party]
  where
    signatory company.owner
    observer employees
    key company : Company
    maintainer key.owner
    controller company.owner can
      CompanyInternal_AddEmployee : ContractId CompanyInternal
        with
          employee : Party
          manager : Bool
        do
          let management' = if manager
                            then employee :: management
                            else management
          create this with employees = employee :: employees, management = management'

    nonconsuming choice CompanyInternal_UpdateCompanyName : ContractId Company
      with
        employee : Party
        newName : Text
      controller employee
      do
        assertMsg "Employee must be in management" $ elem employee management
        exerciseByKey @Company (key company) Company_UpdateName with newName

    nonconsuming choice CompanyInternal_MakeProposal : ContractId Proposal
      with
        employee : Party
        proposedTo : Party
        proposalText : Text
      controller employee
      do
        assertMsg "Employee must be in company" $ elem employee employees
        assertMsg "Cannot propose to own company" $ proposedTo /= this.company.owner
        let proposal = Proposal with proposer = this.company.owner, proposal = proposalText, ..
        create proposal


template Proposal
  with
    proposer : Party
    proposedTo : Party
    proposal : Text
  where
    signatory proposer
    observer proposedTo
    key (proposer, proposedTo, proposal) : (Party, Party, Text)
    maintainer key._1
    controller proposedTo can
      Proposal_Accept : ()
        do
          create Agreement with text = proposal, ..
          create Notification with
              sender = proposedTo
              receiver = proposer, message = "The proposal: '" <> proposal <> "' was accepted."
          return ()
      Proposal_Reject : ()
        do
          create Notification with
              sender = proposedTo
              receiver = proposer, message = "The proposal: '" <> proposal <> "' was rejected."
          return ()


template DelegatedProposal
  with
    proposal : Proposal
    internal : CompanyInternal
    employee : Party
  where
    signatory internal.company.owner
    observer employee
    key (proposal, internal, employee) : (Proposal, CompanyInternal, Party)
    maintainer key._2.company.owner

    controller employee can
      DelegatedProposal_Accept : ContractId DelegatedProposalAction
        do
          create DelegatedProposalAction with proposal = this, action = DPAccept, employee

      DelegatedProposal_Reject : ContractId DelegatedProposalAction
        do
          create DelegatedProposalAction with proposal = this, action = DPReject, employee


data DPAction = DPAccept | DPReject deriving (Show,Eq)

template DelegatedProposalAction
  with
    proposal : DelegatedProposal
    action   : DPAction
    employee : Party
  where
    signatory employee
    observer (signatory proposal)
    controller (signatory proposal) can
      DelegatedProposalAction_Resolve : ()
        do
          case action of
            DPAccept -> exerciseByKey @Proposal (key proposal.proposal) Proposal_Accept
            DPReject -> exerciseByKey @Proposal (key proposal.proposal) Proposal_Reject

template Agreement
  with
    proposer : Party
    proposedTo : Party
    text : Text
  where
    signatory proposer, proposedTo


template Notification
  with
    sender : Party
    receiver : Party
    message : Text
  where
    signatory sender
    controller receiver can
      Notification_Dismiss : ()
        do return ()


template Employee
  with
    party : Party
    name : Text
  where
    signatory party

