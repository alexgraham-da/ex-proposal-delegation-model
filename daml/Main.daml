
module Main where

import Model.Company

test = scenario do
  companyA <- getParty "Company A"
  companyB <- getParty "Company B"
  a1 <- getParty "A employee 1"
  a2 <- getParty "A employee 2"
  b1 <- getParty "B employee 1"
  b2 <- getParty "B employee 2"

  let cA = Company with owner = companyA, name = "Company A", observers = []
  let caInternal = CompanyInternal with company = cA, employees = [], management = []
  (caId, caInternalId) <- companyA `submit` do
      caId <- create cA
      caInternalId1 <- create caInternal
      caInternalId2 <- exercise caInternalId1 CompanyInternal_AddEmployee with employee = a1, manager = False
      caInternalId3 <- exercise caInternalId2 CompanyInternal_AddEmployee with employee = a2, manager = True
      return (caId, caInternalId3)

  let cB = Company with owner = companyB, name = "Company B", observers = []
  let cbInternal = CompanyInternal with company = cB, employees = [], management = []
  (cbId, cbInternalId) <- companyB `submit` do
      cbId <- create cB
      cbInternalId1 <- create cbInternal
      cbInternalId2 <- exercise cbInternalId1 CompanyInternal_AddEmployee with employee = b1, manager = False
      cbInternalId3 <- exercise cbInternalId2 CompanyInternal_AddEmployee with employee = b2, manager = True
      return (cbId, cbInternalId3)

  -- add employeeA1 as a reviewer
  proposerId1 <- companyA `submit` create EmployeeReviewer with employee = a1, company = companyA

  -- add employeeB1 as a submitter
  proposerId1 <- companyB `submit` create EmployeeProposer with employee = b1, company = companyB

  -- Company B and employees must not be able to see Company A internals
  submitMustFail companyB $ visibleByKey @CompanyInternal (key caInternal)
  submitMustFail b1 $ fetchByKey @CompanyInternal (key caInternal)

  -- a1 is not in management
  a1 `submitMustFail` do
      exercise caInternalId CompanyInternal_UpdateCompanyName with employee = a1, newName = "Company Eh2"

  -- Employee B1 should be able to propose
  proposalId <- b1 `submit` exercise proposerId1 EmployeeProposer_MakeProposal with
      proposedTo = companyA, proposalText = "B1 proposing to company A"

  -- Run by trigger:
  dpId <- companyA `submit` do
      proposal <- fetch proposalId
      create DelegatedProposal with proposal, internal = caInternal, employee = a1
  -- end run by trigger

  delegatedProposalActionId <- submit a1 $ exercise dpId DelegatedProposal_Accept

  -- Run by trigger:
  companyA `submit` exercise delegatedProposalActionId DelegatedProposalAction_Resolve
  --
  return ()
  --
