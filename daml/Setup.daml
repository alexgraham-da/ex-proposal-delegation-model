{-# LANGUAGE ApplicativeDo #-}

module Setup where

import Daml.Script

import Templates

setupTest : Script ()
setupTest = do
  companyA <- allocatePartyWithHint "CompanyA" (PartyIdHint "CompanyA")
  companyB <- allocatePartyWithHint "CompanyB" (PartyIdHint "CompanyB")
  a1 <- allocatePartyWithHint "EmployeeA1" (PartyIdHint "EmployeeA1")
  a2 <- allocatePartyWithHint "EmployeeA2" (PartyIdHint "EmployeeA2")
  b1 <- allocatePartyWithHint "EmployeeB1" (PartyIdHint "EmployeeB1")
  b2 <- allocatePartyWithHint "EmployeeB2" (PartyIdHint "EmployeeB2")

  let cA = Company with owner = companyA, name = "Company A", observers = [companyB, a1, a2, b1, b2]
  let cAInternal = CompanyInternal with company = cA, employees = [], management = []

  let cB = Company with owner = companyB, name = "Company B", observers = [companyA, a1, a2, b1, b2]
  let cbInternal = CompanyInternal with company = cB, employees = [], management = []

  caId <- submit companyA $ createCmd cA
  caInternalId <- submit companyA $ createCmd cAInternal
  caInternalId <- submit companyA $ exerciseCmd caInternalId CompanyInternal_AddEmployee with employee = a1, manager = False
  caInternalId <- submit companyA $ exerciseCmd caInternalId CompanyInternal_AddEmployee with employee = a2, manager = True

  cbId <- submit companyB $ createCmd cB
  cbInternalId <- submit companyB $ createCmd cbInternal
  cbInternalId <- submit companyB $ exerciseCmd cbInternalId CompanyInternal_AddEmployee with employee = b1, manager = False
  cbInternalId <- submit companyB $ exerciseCmd cbInternalId CompanyInternal_AddEmployee with employee = b2, manager = True

  caId <- submit a2 $ exerciseCmd caInternalId CompanyInternal_UpdateCompanyName
      with
        employee = a2, newName = "Company Eh Two"

  proposalId <- b1 `submit` exerciseCmd cbInternalId CompanyInternal_MakeProposal
      with
        employee = b1, proposedTo = companyA
        proposalText = "B1 proposing to Company A"


  -- b1 `submit` exerciseCmd cbInternalId CompanyInternal_AcceptProposal with proposal = delegated, employee = b1
  -- companyA `submit` exerciseCmd caInternalId Company_AcceptProposal with proposal = proposal
  -- CompanyInternal_AcceptProposal with proposal = delegated, employee = companyA
  -- exerciseByKeyCmd @DelegatedProposal (proposal, b2) DelegatedProposal_Accept

  -- (_,proposal) <- submit companyB $ fetchByKey @Proposal (companyB, companyB, "B1 proposing to Company A")

  -- (b1DelegatedId, _) <- submit b1 $ fetchByKey @DelegatedProposal (proposal, cbInternal, b1)

  return ()
