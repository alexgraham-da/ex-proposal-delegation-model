{-# LANGUAGE ApplicativeDo #-}

module Setup where

import Daml.Script

import DA.Next.Set

import Model.Company
import Symphony

data LedgerParties = LedgerParties with
  public : Party
  companyA : Party
  companyB : Party
  employeeA1 : Party
  employeeA2 : Party
  employeeB1 : Party
  employeeB2 : Party
    deriving (Eq, Show)

initialize : LedgerParties -> Script ()
initialize = doSetup

allocateParties : Script LedgerParties
allocateParties = do
  public <- allocatePartyWithHint "Public" (PartyIdHint "Public")
  companyA <- allocatePartyWithHint "CompanyA" (PartyIdHint "CompanyA")
  companyB <- allocatePartyWithHint "CompanyB" (PartyIdHint "CompanyB")
  a1 <- allocatePartyWithHint "EmployeeA1" (PartyIdHint "EmployeeA1")
  a2 <- allocatePartyWithHint "EmployeeA2" (PartyIdHint "EmployeeA2")
  b1 <- allocatePartyWithHint "EmployeeB1" (PartyIdHint "EmployeeB1")
  b2 <- allocatePartyWithHint "EmployeeB2" (PartyIdHint "EmployeeB2")
  return $ LedgerParties public companyA companyB a1 a2 b1 b2

setup : Script ()
setup = allocateParties >>= doSetup

doSetup : LedgerParties -> Script ()
doSetup (LedgerParties public companyA companyB a1 a2 b1 b2) = do

  let cA = Company with owner = companyA, name = "Company A", observers = [public]
  let cAInternal = CompanyInternal with company = companyA, employees = fromList [a2], management = []

  let cB = Company with owner = companyB, name = "Company B", observers = [public]
  let cbInternal = CompanyInternal with company = companyB, employees = fromList [b2], management = []

  -- create companies
  caId <- submit companyA $ createCmd cA
  caInternalId <- submit companyA $ createCmd cAInternal
  caCompanyASymphonyId <- submit companyA $ createCmd CompanySymphony with owner = companyA

  cbId <- submit companyB $ createCmd cB
  cbInternalId <- submit companyB $ createCmd cbInternal
  caCompanyBSymphonyId <- submit companyB $ createCmd CompanySymphony with owner = companyB

  -- add employeeA2 as a manager
  managerIdA <- companyA `submit` createCmd EmployeeManager with employee = a2, company = companyA

  -- add employeeB2 as a manager
  managerIdB <- companyB `submit` createCmd EmployeeManager with employee = b2, company = companyB

  a2 `submit` exerciseCmd managerIdA EmployeeManager_AddEmployee with newEmployee = a1, fullName = "Employee A1", email = "alex.graham@digitalasset.com"
  a2 `submit` exerciseCmd managerIdA EmployeeManager_AddEmployee with newEmployee = a2, fullName = "Employee A2", email = "alex.graham+symphonydev1@digitalasset.com"
  b2 `submit` exerciseCmd managerIdB EmployeeManager_AddEmployee with newEmployee = b1, fullName = "Employee B1", email = "dimitri.liakakos@digitalasset.com"
  b2 `submit` exerciseCmd managerIdB EmployeeManager_AddEmployee with newEmployee = b2, fullName = "Employee B2", email = "alex.graham+symphonydev2@digitalasset.com"

 -- add employeeA1 as a reviewer
  a1Reviewer <- a2 `submit` exerciseCmd managerIdA EmployeeManager_AddReviewer with newReviewer = a1
  a1Proposer <- a2 `submit` exerciseCmd managerIdA EmployeeManager_AddProposer with newProposer = a1

  -- add employeeB1 as a submitter
  b1Proposer <- b2 `submit` exerciseCmd managerIdB EmployeeManager_AddProposer with newProposer = b1

  return ()

