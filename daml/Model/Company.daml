module Model.Company where

import Model.Proposal

import DA.Next.Set

template Company
  with
    owner : Party
    name : Text
    observers : [Party]
  where
    signatory owner
    observer observers
    key owner : Party
    maintainer key
    controller owner can
      Company_UpdateName : ContractId Company
        with
          newName : Text
        do
          create this with name = newName

    nonconsuming choice Company_Propose : ContractId Proposal
      with
        proposer : Party
        proposal : Text
      controller proposer
      do
        create Proposal with proposer, proposedTo = owner, proposal


template CompanyInternal
  with
    company : Party
    employees : Set Party
    management : [Party]
  where
    signatory company
    observer employees
    key company : Party
    maintainer key
    controller company can
      CompanyInternal_AddEmployee : ContractId CompanyInternal
        with
          employee : Party
          manager : Bool
        do
          let management' = if manager
                            then employee :: management
                            else management
          create this with employees = insert employee employees, management = management'

    nonconsuming choice CompanyInternal_UpdateCompanyName : ContractId Company
      with
        employee : Party
        newName : Text
      controller employee
      do
        assertMsg "Employee must be in management" $ elem employee management
        exerciseByKey @Company company Company_UpdateName with newName


template EmployeeManager
  with
    employee : Party
    company : Party
  where
    signatory company
    observer employee
    key (employee, company) : (Party, Party)
    maintainer key._2
    nonconsuming choice EmployeeManager_AddEmployee : ContractId CompanyInternal
      with
        newEmployee : Party
        fullName : Text
        email : Text
      controller employee
      do
        (companyInternalId, companyInternal) <- fetchByKey @CompanyInternal company
        create Employee with party = newEmployee, ..
        archive companyInternalId
        create companyInternal with employees = insert newEmployee companyInternal.employees

    nonconsuming choice EmployeeManager_AddProposer : ContractId EmployeeProposer
      with
        newProposer : Party
      controller employee
      do
        create EmployeeProposer with employee = newProposer, ..

    nonconsuming choice EmployeeManager_AddReviewer : ContractId EmployeeReviewer
      with
        newReviewer : Party
      controller employee
      do
        create EmployeeReviewer with employee = newReviewer, ..

    nonconsuming choice EmployeeManager_ChangeCompanyName : ContractId CompanyActionRequest
      with
        newName : Text
      controller employee
      do
        create CompanyActionRequest with action = UpdateName newName, ..


template EmployeeProposer
  with
    employee : Party
    company : Party
  where
    signatory company
    observer employee
    key (employee, company) : (Party, Party)
    maintainer key._2
    nonconsuming choice EmployeeProposer_MakeProposal : ContractId Proposal
      with
        proposedTo : Party
        proposalText : Text
      controller employee
      do
        assertMsg "Cannot propose to own company" $ proposedTo /= company
        let proposal = Proposal with proposer = company, proposal = proposalText, ..
        create proposal


template EmployeeReviewer
  with
    employee : Party
    company : Party
  where
    signatory company
    observer employee
    key (employee, company) : (Party, Party)

    maintainer key._2


template Employee
  with
    party : Party
    company : Party
    fullName : Text
    email : Text
  where
    signatory company
    observer party
    key (email, company) : (Text, Party)
    maintainer key._2


data CompanyAction = UpdateName Text deriving (Eq, Show)

template CompanyActionRequest
  with
    employee : Party
    company : Party
    action : CompanyAction
  where
    signatory company
    controller company can
      CompanyActionRequest_Resolve : ContractId Company
        do
          case action of
            (UpdateName newName) -> exerciseByKey @Company company Company_UpdateName with ..
