module Model.Company where

import Model.Proposal

import DA.Next.Set

template Company
  with
    owner : Party
    name : Text
    observers : [Party]
  where
    signatory owner
    observer observers
    key (owner, name) : (Party, Text)
    maintainer key._1
    controller owner can
      Company_UpdateName : ContractId Company
        with
          newName : Text
        do
          create this with name = newName

    nonconsuming choice Company_Propose : ContractId Proposal
      with
        proposer : Party
        proposal : Text
      controller proposer
      do
        create Proposal with proposer, proposedTo = owner, proposal


template CompanyInternal
  with
    company : Company
    employees : Set Party
    management : [Party]
  where
    signatory company.owner
    observer employees
    key company : Company
    maintainer key.owner
    controller company.owner can
      CompanyInternal_AddEmployee : ContractId CompanyInternal
        with
          employee : Party
          manager : Bool
        do
          let management' = if manager
                            then employee :: management
                            else management
          create this with employees = insert employee employees, management = management'

    nonconsuming choice CompanyInternal_UpdateCompanyName : ContractId Company
      with
        employee : Party
        newName : Text
      controller employee
      do
        assertMsg "Employee must be in management" $ elem employee management
        exerciseByKey @Company (key company) Company_UpdateName with newName


template EmployeeManager
  with
    employee : Party
    company : Company
  where
    signatory (signatory company)
    observer employee
    key (employee, company.owner) : (Party, Party)
    maintainer key._2
    nonconsuming choice EmployeeManager_AddEmployee : ContractId CompanyInternal
      with
        newEmployee : Party
        name : Text
      controller employee
      do
        (companyInternalId, companyInternal) <- fetchByKey @CompanyInternal company
        create Employee with party = newEmployee, company = company.owner, ..
        archive companyInternalId
        create companyInternal with employees = insert newEmployee companyInternal.employees

    nonconsuming choice EmployeeManager_AddProposer : ContractId EmployeeProposer
      with
        newProposer : Party
      controller employee
      do
        create EmployeeProposer with employee = newProposer, company = company.owner

    nonconsuming choice EmployeeManager_AddReviewer : ContractId EmployeeReviewer
      with
        newReviewer : Party
      controller employee
      do
        create EmployeeReviewer with employee = newReviewer, company = company.owner


template EmployeeProposer
  with
    employee : Party
    company : Party
  where
    signatory company
    observer employee
    key (employee, company) : (Party, Party)
    maintainer key._2
    nonconsuming choice EmployeeProposer_MakeProposal : ContractId Proposal
      with
        proposedTo : Party
        proposalText : Text
      controller employee
      do
        assertMsg "Cannot propose to own company" $ proposedTo /= company
        let proposal = Proposal with proposer = company, proposal = proposalText, ..
        create proposal


template EmployeeReviewer
  with
    employee : Party
    company : Party
  where
    signatory company
    observer employee
    key (employee, company) : (Party, Party)

    maintainer key._2


template Employee
  with
    party : Party
    company : Party
    name : Text
  where
    signatory company
    observer party
    key (party, company) : (Party, Party)
    maintainer key._2


template DelegatedProposal
  with
    proposal : Proposal
    internal : CompanyInternal
    employee : Party
  where
    signatory internal.company.owner
    observer employee
    key (proposal, internal, employee) : (Proposal, CompanyInternal, Party)
    maintainer key._2.company.owner

    controller employee can
      DelegatedProposal_Accept : ContractId DelegatedProposalAction
        do
          create DelegatedProposalAction with proposal = this, action = DPAccept, employee

      DelegatedProposal_Reject : ContractId DelegatedProposalAction
        do
          create DelegatedProposalAction with proposal = this, action = DPReject, employee


data DPAction = DPAccept | DPReject deriving (Show,Eq)

template DelegatedProposalAction
  with
    proposal : DelegatedProposal
    action   : DPAction
    employee : Party
  where
    signatory employee
    observer (signatory proposal)
    controller (signatory proposal) can
      DelegatedProposalAction_Resolve : ()
        do
          case action of
            DPAccept -> exerciseByKey @Proposal (key proposal.proposal) Proposal_Accept
            DPReject -> exerciseByKey @Proposal (key proposal.proposal) Proposal_Reject
