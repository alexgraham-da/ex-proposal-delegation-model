module Model.Proposal where

import Model.Notification

import SymphonyIntegration.InboundDirectMessage

template Proposal
  with
    proposer : Party
    proposedTo : Party
    proposal : Text
  where
    signatory proposer
    observer proposedTo
    key (proposer, proposedTo, proposal) : (Party, Party, Text)
    maintainer key._1
    controller proposedTo can
      Proposal_Accept : ()
        do
          create Agreement with text = proposal, ..
          create Notification with
              sender = proposedTo
              receiver = proposer, message = "The proposal: '" <> proposal <> "' was accepted."
          return ()
      Proposal_Reject : ()
        do
          create Notification with
              sender = proposedTo
              receiver = proposer, message = "The proposal: '" <> proposal <> "' was rejected."
          return ()


template Agreement
  with
    proposer : Party
    proposedTo : Party
    text : Text
  where
    signatory proposer, proposedTo

    key (proposer, proposedTo, text) : (Party, Party, Text)
    maintainer key._1


template AgreementInternal
  with
    company : Party
    observers : [Party]
    agreement : Agreement
  where
    signatory company
    observer observers
    key (company, agreement) : (Party, Agreement)
    maintainer key._1


template DelegatedProposal
  with
    proposal : Proposal
    company : Party
    employee : Party
  where
    signatory company
    observer employee
    key (proposal, company, employee) : (Proposal, Party, Party)
    maintainer key._2

    controller employee can
      DelegatedProposal_Accept : ContractId DelegatedProposalAction
        do
          create DelegatedProposalAction with proposal = this, action = DPAccept, employee

      DelegatedProposal_Reject : ContractId DelegatedProposalAction
        do
          create DelegatedProposalAction with proposal = this, action = DPReject, employee


data DPAction = DPAccept | DPReject deriving (Show,Eq)

template DelegatedProposalAction
  with
    proposal : DelegatedProposal
    action   : DPAction
    employee : Party
  where
    signatory employee
    observer (signatory proposal)
    controller (signatory proposal) can
      DelegatedProposalAction_Resolve : ()
        do
          case action of
            DPAccept -> exerciseByKey @Proposal (key proposal.proposal) Proposal_Accept
            DPReject -> exerciseByKey @Proposal (key proposal.proposal) Proposal_Reject
