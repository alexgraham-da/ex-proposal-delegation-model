module Tests where

import DA.Optional

import Daml.Script

import Templates
import Setup

type ContractPair a = (ContractId a, a)

data TestContracts = TestContracts with
  cA         : ContractPair Company
  caInternal : ContractPair CompanyInternal
  cB         : ContractPair Company
  cbInternal : ContractPair CompanyInternal
    deriving (Show,Eq)

findOrCreate : (Template t, TemplateKey t k) => Party -> t -> Script (ContractId t, t)
findOrCreate party contract = do
  opt <- queryContractKey party (key contract)
  case opt of
    (Some c) -> return c
    None     -> (,) <$> submit party (createCmd contract) <*> return contract

reinitialize : LedgerParties -> Script TestContracts
reinitialize (LedgerParties public companyA companyB a1 a2 b1 b2) = do
  cA         <- findOrCreate companyA $ Company with owner = companyA, name = "Company A", observers = [public]
  caInternal <- findOrCreate companyA $ CompanyInternal with company = snd cA, employees = [a1, a2], management = [a1]
  cB         <- findOrCreate companyB $ Company with owner = companyB, name = "Company B", observers = [public]
  cbInternal <- findOrCreate companyB $ CompanyInternal with company = snd cB, employees = [a1, a2], management = [b1]

  return $ TestContracts cA caInternal cB cbInternal

initializeTests : LedgerParties -> Script TestSetupResults
initializeTests lp@(LedgerParties public companyA companyB a1 a2 b1 b2) = do
  tc@(TestContracts (caId, cA) (caInternalId, caInternal) (cbId, cB) (cbInternalId, cbInternal)) <- reinitialize lp

  proposalId <- b1 `submit` exerciseCmd cbInternalId CompanyInternal_MakeProposal with
        employee = b1, proposedTo = companyA
        proposalText = "B1 proposing to Company A"

  return (lp,proposalId)

type TestSetupResults = (LedgerParties,ContractId Proposal)

testStepTwo : TestSetupResults -> Script (LedgerParties,Proposal)
testStepTwo (lp@(LedgerParties public companyA companyB a1 a2 b1 b2), proposalId) = do
  (TestContracts (caId, cA) (caInternalId, caInternal) (cbId, cB) (cbInternalId, cbInternal)) <- reinitialize lp

  proposal <- fromSome <$> queryContractId companyA proposalId

  let dp = DelegatedProposal with proposal, internal = caInternal, employee = a1
  someDelegatedProposal : Optional (ContractPair DelegatedProposal) <- queryContractKey a1 $ key dp
  assertMsg "delegated proposal not found" $ isSome someDelegatedProposal

  let (dpId,_) = fromSome someDelegatedProposal
  a1 `submit` exerciseCmd dpId DelegatedProposal_Accept

  return (lp,proposal)

testStepThree : (LedgerParties,Proposal) -> Script ()
testStepThree (lp@(LedgerParties public companyA companyB a1 a2 b1 b2), p) = do
  (TestContracts (caId, cA) (caInternalId, caInternal) (cbId, cB) (cbInternalId, cbInternal)) <- reinitialize lp

  let (Proposal proposer proposedTo proposal) = p
  let agreement = Agreement with proposer = proposer, proposedTo = proposedTo, text = proposal

  someAgreement : Optional (ContractPair Agreement) <- queryContractKey companyA $ key agreement
  assertMsg "agreement not found" $ isSome someAgreement

  let notification = Notification with sender = companyB, receiver = b1, message = ("The proposal: '" <> proposal <> "' was accepted.")
  notifications : [ContractPair Notification] <- query b1
  assertMsg "employees of company b must have been notified" $ not $ null notifications

  return ()
