module Tests where

import DA.Optional
import DA.Next.Set hiding (null)

import Daml.Script

import Model.Company
import Model.Proposal
import Model.Notification
import Symphony

import Setup

type ContractPair a = (ContractId a, a)

data TestContracts = TestContracts with
  cA         : ContractPair Company
  caInternal : ContractPair CompanyInternal
  cB         : ContractPair Company
  cbInternal : ContractPair CompanyInternal
    deriving (Show,Eq)

-- type Results a = Script (LedgerParties, a)
data Results a = Results with
  ledgerParties : LedgerParties
  payload       : a

results : LedgerParties -> a -> Script (Results a)
results ledgerParties payload = return $ Results with ..

type Step a = Script (Results a)

findOrCreate : (Template t, TemplateKey t k) => Party -> t -> Script (ContractId t, t)
findOrCreate party contract = do
  opt <- queryContractKey party (key contract)
  case opt of
    (Some c) -> return c
    None     -> (,) <$> submit party (createCmd contract) <*> return contract

reinitialize : LedgerParties -> Script TestContracts
reinitialize (LedgerParties public companyA companyB a1 a2 b1 b2) = do
  cA         <- companyA `findOrCreate` Company with owner = companyA, name = "Company A", observers = [public]
  caInternal <- companyA `findOrCreate` CompanyInternal with company = companyA, employees = fromList [], management = []
  cB         <- companyB `findOrCreate` Company with owner = companyB, name = "Company B", observers = [public]
  cbInternal <- companyB `findOrCreate` CompanyInternal with company = companyB, employees = fromList [], management = []

  return $ TestContracts cA caInternal cB cbInternal

testInit : Script (Results (ContractId Proposal))
testInit = allocateParties >>= initializeTests

initializeTests : LedgerParties -> Step (ContractId Proposal)
initializeTests lp@(LedgerParties public companyA companyB a1 a2 b1 b2) = do
  tc@(TestContracts (caId, cA) (caInternalId, caInternal) (cbId, cB) (cbInternalId, cbInternal)) <- reinitialize lp

  debug "Setting up employee role contracts..."

  caSymphonyId <- companyA `findOrCreate` CompanySymphony with owner = companyA
  cbSymphonyId <- companyB `findOrCreate` CompanySymphony with owner = companyB

  companyA `submit` exerciseCmd caInternalId CompanyInternal_AddEmployee with
        employee = a1, fullName = "Employee A1", email = "employeeA1@companya.com", isManager = True

  companyB `submit` exerciseCmd cbInternalId CompanyInternal_AddEmployee with
        employee = b1, fullName = "Employee B1", email = "employeeB1@companyB.com", isManager = True

  (Some (managerIdA,_)) <- queryContractKey @EmployeeManager a1 (a1, companyA)
  (Some (managerIdB,_)) <- queryContractKey @EmployeeManager b1 (b1, companyB)

  -- add employees to company
  a1 `submit` exerciseCmd managerIdA EmployeeManager_OnboardEmployee with
      newEmployee = a2, fullName = "Employee A2", email = "employeeA2@companya.com"
      isManager = False, isProposer = False, isReviewer = False

  b1 `submit` exerciseCmd managerIdB EmployeeManager_OnboardEmployee with
      newEmployee = b2, fullName = "Employee B2", email = "employeeB@companyB.com"
      isManager = False, isProposer = False, isReviewer = False

 -- add employeeA1 as a reviewer
  a2Reviewer <- a1 `submit` exerciseByKeyCmd @EmployeeManager (a1, companyA) EmployeeManager_AddReviewer with
      newReviewer = a2

  -- add employeeB1 as a submitter
  b2Proposer <- b1 `submit` exerciseCmd managerIdB EmployeeManager_AddProposer with newProposer = b2

  debug "Employee B2 making proposal..."
  proposalId <- b2 `submit` exerciseCmd b2Proposer EmployeeProposer_MakeProposal with
      proposedTo = companyA, proposalText = "B2 proposing to Company A"

  debug "Employee B1 changing name of company..."
  -- change name of Company B
  b1 `submit` exerciseCmd managerIdB EmployeeManager_ChangeCompanyName with newName = "New Company B"

  results lp proposalId

-- >> CompanyA trigger creates DelegatedProposals
-- >> CompanyB trigger resolves CompanyActionRequests

testStepTwo : Results (ContractId Proposal) -> Step Proposal
testStepTwo (Results lp@(LedgerParties public companyA companyB a1 a2 b1 b2) proposalId) = do
  (TestContracts (caId, cA) (caInternalId, caInternal) (cbId, cB) (cbInternalId, cbInternal)) <- reinitialize lp

  assertMsg "Company name should have changed" $ (name cB) == "New Company B"

  proposal <- fromSome <$> queryContractId companyA proposalId

  -- EmployeeA2 is not a reviewer
  assertMsg "Employee A1 is not a reviewer, so should not have a proposal contract"
    =<< isNone <$> queryDelegatedProposal companyA proposal a1

  -- EmployeeA1 should have a delegated proposal
  someDelegatedProposal1 <- queryDelegatedProposal companyA proposal a2
  assertMsg "delegated proposal not found for employee A2" $ isSome someDelegatedProposal1

  debug "Employee A2 accepting proposal..."
  let (dpId,_) = fromSome someDelegatedProposal1
  a2 `submit` exerciseCmd dpId DelegatedProposal_Accept

  results lp proposal

  where
    queryDelegatedProposal : Party -> Proposal -> Party -> Script (Optional (ContractPair DelegatedProposal))
    queryDelegatedProposal company proposal employee = queryContractKey employee $ key DelegatedProposal with ..

-- >> CompanyA trigger resolves proposal action
-- >> CompanyB trigger notifies employees
-- >> CompanyA/CompanyB triggers create Exposed contracts

testStepThree : Results Proposal -> Step ()
testStepThree (Results lp@(LedgerParties public companyA companyB a1 a2 b1 b2) p) = do
  (TestContracts (caId, cA) (caInternalId, caInternal) (cbId, cB) (cbInternalId, cbInternal)) <- reinitialize lp

  let (Proposal proposer proposedTo proposal) = p
  let agreement = Agreement with proposer = proposer, proposedTo = proposedTo, text = proposal

  -- Check to see if Agreement exist.
  someAgreement <- queryContractKey @Agreement companyA $ key agreement
  assertMsg "agreement not found" $ isSome someAgreement

  -- Check to see if Notifications exist.
  let notification = Notification with sender = companyB, receiver = b2, message = ("The proposal: '" <> proposal <> "' was accepted.")
  notifications <- query @Notification b2
  assertMsg "employees of company b must have been notified" $ not $ null notifications

  -- Check to see if internal agreements exist
  maybeAgreementInternalA <- queryContractKey @AgreementInternal a1 (companyA, agreement)
  assertMsg "exposed agreement not found for employee of company A" $ isSome maybeAgreementInternalA

  maybeAgreementInternalB <- queryContractKey @AgreementInternal b1 (companyB, agreement)
  assertMsg "exposed agreement not found for employee of company B" $ isSome maybeAgreementInternalB

  results lp ()
